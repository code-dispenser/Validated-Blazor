@page "/clienttentantvalidators"

@using System.Collections.Immutable
@using Validated.Blazor
@using Validated.Blazor.Builders
@using Validated.Blazor.Common.Constants
@using Validated.Blazor.Common.Types
@using Validated.Contracts.Data
@using Validated.Contracts.Models
@using Validated.Contracts.Validators
@using Validated.Core.Factories
@using Validated.Core.Validators

@inject IValidatorFactoryProvider _validationFactoryProvider

@rendermode InteractiveWebAssembly
<h3>WASM Multi-Tenant / Dynamic Validators (Created From Configuration Info)</h3>
<ul>
    <li>Name: @RendererInfo.Name</li>
    <li>Is Interactive: @RendererInfo.IsInteractive</li>
    <li>Assigned Render Mode: @AssignedRenderMode</li>
</ul>


<EditForm EditContext="_editContext">
    <BlazorValidated TEntity="ContactDto" BoxedValidators="_contactBoxedValidators" AddDisplayName="true" OnValidationStarted="OnValidationStarted" OnValidationCompleted="OnValidationCompletedStarted" />
    <ValidationSummary />

    <div class="row mb-2">
        <div class="col-sm-6">
            <label class="form-label" for="textBoxTitle">Title:</label>
            <InputText id="textBoxTitle" Class="form-control" @bind-Value="_contactData.Title" />
            <ValidationMessage For="() => _contactData.Title" />
        </div>
    </div>
    <div class="row mb-2">
        <div class="col-sm-6">
            <label class="form-label" for="textBoxFirstName">First name:</label>
            <InputText id="textBoxFirstName" Class="form-control" @bind-value="_contactData.GivenName" />
            <ValidationMessage For="() => _contactData.GivenName" />
        </div>
        <div class="col-sm-6">
            <label class="form-label" for="textBoxSurname">Surname:</label>
            <InputText id="textBoxSurname" Class="form-control" @bind-Value="_contactData.FamilyName" />
            <ValidationMessage For="() => _contactData.FamilyName" />
        </div>
    </div>
    <div class="row mb-2">
        <div class="col-sm-6">
            <label class="form-label" for="textBoxAge">Age:</label>
            <InputNumber id="textBoxAge" Class="form-control" @bind-value="_contactData.Age" />
            <ValidationMessage For="() => _contactData.Age" />
        </div>
    </div>
    <div class="row mb-2">
        <div class="col-sm-6">
            <label class="form-label" for="textBoxDOB">Date of birth:</label>
            <InputDate id="textBoxDOB" Class="form-control" @bind-value="_contactData.DOB" />
            <ValidationMessage For="() => _contactData.DOB" />
        </div>
        <div class="col-sm-6">
            <label class="form-label" for="textBoxCompareDOB">Compare DOB:</label>
            <InputDate id="textBoxCompareDOB" Class="form-control" @bind-Value="_contactData.CompareDOB" />
            <ValidationMessage For="() => _contactData.CompareDOB" />
        </div>
    </div>
   
    <div class="row mb-2">
        <h5 class="col-sm-12 mb-2 mt-2">Address (nested complex type):</h5>
        <div class="col-sm-12">
            <label class="form-label" for="textBoxAddressLine">Address line:</label>
            <InputText id="textBoxAddressLine" Class="form-control" @bind-value="_contactData.Address.AddressLine" />
            <ValidationMessage For="() => _contactData.Address.AddressLine" />
        </div>
    </div>
    <div class="row mb-2">
        <div class="col-sm-4">
            <label class="form-label" for="textBoxTownCity">Town / city:</label>
            <InputText id="textBoxTownCity" Class="form-control" @bind-value="_contactData.Address.TownCity" />
            <ValidationMessage For="() => _contactData.Address.TownCity" />
        </div>
        <div class="col-sm-4">
            <label class="form-label" for="textBoxCounty">County:</label>
            <InputText id="textBoxCounty" Class="form-control" @bind-Value="_contactData.Address.County" />
            <ValidationMessage For="() => _contactData.Address.County" />
        </div>
        <div class="col-sm-4">
            <label class="form-label" for="textBoxPostCode">Postcode:</label>
            <InputText id="textBoxPostCode" Class="form-control" @bind-Value="_contactData.Address.NullablePostcode" />
            <ValidationMessage For="() => _contactData.Address.NullablePostcode" />
        </div>
    </div>

    <div class="row mb-2">
        <h5 class="col-sm-12 mb-2 mt-2">Contact methods (collection of complex types):</h5>
        
        @{var index = 0;}
        @foreach(var contactMethod in _contactData.ContactMethods)
        {
            <div class="col-sm-6">
                <label class="form-label" for=@("texBoxMethodType-" + index)>Method type:</label>
                <InputText id=@("texBoxMethodType-" + index) Class="form-control" @bind-Value="@contactMethod.MethodType" />
                <ValidationMessage For="() => contactMethod.MethodType" />
            </div>
            <div class="col-sm-6">
                <label class="form-label" for=@("texBoxMethodValue-" + index)>Method value:</label>
                <InputText id="@("texBoxMethodValue=" + index)" Class="form-control" @bind-Value="@contactMethod.MethodValue" />
                <ValidationMessage For="() => contactMethod.MethodValue" />
            </div>
            <div class="col-sm-12">
                <button class="btn btn-danger" type="button" @onclick="() => RemoveContactMethod(contactMethod)">Delete</button>
                <hr />
            </div>
            
           index++;
        }

    </div>

    <button class="btn btn-primary" type="submit">Submit</button>
    <button class="btn btn-primary" type="button" @onclick="AddContactMethod">Add Contact Method</button>

</EditForm>


@code {
    private EditContext _editContext = default!;
    private ContactDto _contactData  = StaticData.CreateContactObjectGraph();

    private ImmutableDictionary<string, BoxedValidator> _contactBoxedValidators = default!;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(_contactData);

        var ruleConfigs = StaticData.ValidationRuleConfigsForTenantValidationBuilder();

        var tenantBuilder = BlazorTenantValidationBuilder<ContactDto>.Create(ruleConfigs, _validationFactoryProvider)
                                .ForMember(c => c.Title)
                                .ForMember(c => c.GivenName)
                                .ForMember(c => c.FamilyName)  // << This validator (function) combines two functions a regex and a separate length validator
                                .ForMember(c => c.Age)
                                .ForComparisonWithValue(c => c.DOB)
                                .ForComparisonWithMember(c => c.CompareDOB)
                                .ForNestedMember(c => c.Address, AddressValidators.GetBoxedTenantAddressValidators(ruleConfigs,_validationFactoryProvider))
                                .ForEachCollectionMember(c => c.ContactMethods, ContactMethodValidators.GetBoxedTenantContactMethodValidators(ruleConfigs, _validationFactoryProvider))
                                .ForCollection(c => c.ContactMethods);

                                
        _contactBoxedValidators = tenantBuilder.GetBoxedValidators();

        _contactData.ContactMethods = [];

    }

    private void AddContactMethod() 

        => _contactData.ContactMethods.Add(new ContactMethodDto());

    private void RemoveContactMethod(ContactMethodDto contactMethod)

        => _contactData.ContactMethods.Remove(contactMethod);

    private async Task<CancellationToken> OnValidationStarted(ValidationLevel validationLevel, FieldIdentifier? fieldIdentifier)
    {
        return await Task.FromResult(CancellationToken.None);
    }
    private async Task OnValidationCompletedStarted(ValidationLevel validationLevel, FieldIdentifier? fieldIdentifier, CancellationToken cancellationToken)
    {
        await Task.CompletedTask;
    }

}
